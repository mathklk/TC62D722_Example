#ifndef _CHARACTERS_H
#define _CHARACTERS_H

typedef enum _Characters {
    ASCII_SPACE = 0x0, // Space
    ASCII_EXCLAMATION_MARK = 0x0008 + 0x0080, // !
    ASCII_QUOTATION_MARKS = 0x0080 + 0x0800, // "
    ASCII_HASH = 0x0001 + 0x0008 + 0x0010 + 0x0080 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // #
    ASCII_DOLLAR = 0x0001 + 0x0008 + 0x0010 + 0x0020 + 0x0080 + 0x0100 + 0x0200 + 0x1000 + 0x4000 + 0x8000, // $
    ASCII_PERCENT = 0x0004 + 0x0020 + 0x0400 + 0x4000, // %
    ASCII_AND = 0x0001 + 0x0002 + 0x0010 + 0x0020 + 0x0080 + 0x0100 + 0x2000 + 0x8000, // &
    ASCII_APOSTROPHE = 0x0400, // '
    ASCII_OPEN_BRACKET = 0x0008 + 0x0080 + 0x0200 + 0x8000, // (
    ASCII_CLOSE_BRACKET = 0x0001 + 0x0008 + 0x0080 + 0x0100, // )
    ASCII_TIMES = 0x0004 + 0x0008 + 0x0010 + 0x0040 + 0x0080 + 0x0400 + 0x1000 + 0x2000, // *
    ASCII_PLUS = 0x0008 + 0x0010 + 0x0080 + 0x1000, // +
    ASCII_KOMMA = 0x4000, // ,
    ASCII_MINUS = 0x0010 + 0x1000, // -
    ASCII_DOT = 0x10000, // .
    ASCII_SLASH = 0x0004 + 0x0400, // /
    ASCII_0 = 0x0001 + 0x0002 + 0x0004 + 0x0020 + 0x0100 + 0x0200 + 0x0400 + 0x0800 + 0x4000 + 0x8000, // 0
    ASCII_1 = 0x0400 + 0x0800 + 0x4000, // 1
    ASCII_2 = 0x0001 + 0x0002 + 0x0010 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x8000, // 2
    ASCII_3 = 0x0001 + 0x0010 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // 3
    ASCII_4 = 0x0010 + 0x0020 + 0x0800 + 0x1000 + 0x4000, // 4
    ASCII_5 = 0x0001 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x1000 + 0x4000 + 0x8000, // 5
    ASCII_6 = 0x0001 + 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x1000 + 0x4000 + 0x8000, // 6
    ASCII_7 = 0x0008 + 0x0100 + 0x0200 + 0x0400, // 7
    ASCII_8 = 0x0001 + 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // 8
    ASCII_9 = 0x0001 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // 9
    ASCII_COLON = 0x0008 + 0x0080, // :
    ASCII_SEMI_COLON = 0x0004 + 0x0080, // ;
    ASCII_LESS = 0x0400 + 0x2000, // <
    ASCII_EQUAL = 0x0001 + 0x0010 + 0x1000 + 0x8000, // =
    ASCII_MORE = 0x0004 + 0x0040, // >
    ASCII_QUESTION_MARK = 0x0008 + 0x0100 + 0x0200 + 0x0800 + 0x1000, // ?
    ASCII_AT = 0x0001 + 0x0002 + 0x0008 + 0x0010 + 0x0100 + 0x0200 + 0x0800 + 0x4000 + 0x8000, // @
    ASCII_A = 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x4000, // A
    ASCII_B = 0x0001 + 0x0008 + 0x0080 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // B
    ASCII_C = 0x0001 + 0x0002 + 0x0020 + 0x0100 + 0x0200 + 0x8000, // C
    ASCII_D = 0x0001 + 0x0008 + 0x0080 + 0x0100 + 0x0200 + 0x0800 + 0x4000 + 0x8000, // D
    ASCII_E = 0x0001 + 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x1000 + 0x8000, // E
    ASCII_F = 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x1000, // F
    ASCII_G = 0x0001 + 0x0002 + 0x0020 + 0x0100 + 0x0200 + 0x1000 + 0x4000 + 0x8000, // G
    ASCII_H = 0x0002 + 0x0010 + 0x0020 + 0x0800 + 0x1000 + 0x4000, // H
    ASCII_I = 0x0001 + 0x0008 + 0x0080 + 0x0100 + 0x0200 + 0x8000, // I
    ASCII_J = 0x0001 + 0x0002 + 0x0200 + 0x0800 + 0x4000 + 0x8000, // J
    ASCII_K = 0x0002 + 0x0010 + 0x0020 + 0x0400 + 0x2000, // K
    ASCII_L = 0x0001 + 0x0002 + 0x0020 + 0x8000, // L
    ASCII_M = 0x0002 + 0x0020 + 0x0040 + 0x0400 + 0x0800 + 0x4000, // M
    ASCII_N = 0x0002 + 0x0020 + 0x0040 + 0x0800 + 0x2000 + 0x4000, // N
    ASCII_O = 0x0001 + 0x0002 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x4000 + 0x8000, // O
    ASCII_P = 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000, // P
    ASCII_Q = 0x0001 + 0x0002 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x2000 + 0x4000 + 0x8000, // Q
    ASCII_R = 0x0002 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x2000, // R
    ASCII_S = 0x0001 + 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x1000 + 0x4000 + 0x8000, // S
    ASCII_T = 0x0008 + 0x0080 + 0x0100 + 0x0200, // T
    ASCII_U = 0x0001 + 0x0002 + 0x0020 + 0x0800 + 0x4000 + 0x8000, // U
    ASCII_V = 0x0002 + 0x0004 + 0x0020 + 0x0400, // V
    ASCII_W = 0x0001 + 0x0002 + 0x0008 + 0x0020 + 0x0800 + 0x4000 + 0x8000, // W
    ASCII_X = 0x0004 + 0x0040 + 0x0400 + 0x2000, // X
    ASCII_Y = 0x0008 + 0x0040 + 0x0400, // Y
    ASCII_Z = 0x0001 + 0x0004 + 0x0100 + 0x0200 + 0x0400 + 0x8000, // Z
    ASCII_BOX_OPEN_BRACKET = 0x0001 + 0x0002 + 0x0020 + 0x0100, // [
    ASCII_BACK_SLASH = 0x0040 + 0x2000, // backslash
    ASCII_BOX_CLOSE_BRACKET = 0x0200 + 0x0800 + 0x4000 + 0x8000, // ]
    ASCII_CIRCUMFLEX = 0x0004 + 0x2000, // ^
    ASCII_UNDERLINE = 0x0001 + 0x8000, // _
    ASCII_GRAVE = 0x0040, // `
    ASCII_SMALL_A = 0x0001 + 0x0002 + 0x0008 + 0x0010 + 0x8000, // a
    ASCII_SMALL_B = 0x0001 + 0x0002 + 0x0010 + 0x0020 + 0x2000 + 0x8000, // b
    ASCII_SMALL_C = 0x0001 + 0x0002 + 0x0010 + 0x1000 + 0x8000, // c
    ASCII_SMALL_D = 0x0001 + 0x0004 + 0x0800 + 0x1000 + 0x4000 + 0x8000, // d
    ASCII_SMALL_E = 0x0001 + 0x0002 + 0x0004 + 0x0010 + 0x8000, // e
    ASCII_SMALL_F = 0x0002 + 0x0010 + 0x0020 + 0x0100, // f
    ASCII_SMALL_G = 0x0001 + 0x0800 + 0x1000 + 0x4000 + 0x8000 + 0x0200 + 0x0080, // g ??
    ASCII_SMALL_H = 0x0002 + 0x0008 + 0x0010 + 0x0020, // h
    ASCII_SMALL_I = 0x0008 + 0x0200 + 0x8000, // i
    ASCII_SMALL_J = 0x0200 + 0x4000 + 0x8000, // j
    ASCII_SMALL_K = 0x0008 + 0x0080 + 0x0400 + 0x2000, // k
    ASCII_SMALL_L = 0x0008 + 0x0080 + 0x8000, // l
    ASCII_SMALL_M = 0x0002 + 0x0008 + 0x0010 + 0x1000 + 0x4000, // m
    ASCII_SMALL_N = 0x0002 + 0x0008 + 0x0010, // n
    ASCII_SMALL_O = 0x0001 + 0x0002 + 0x0010 + 0x1000 + 0x4000 + 0x8000, // o
    ASCII_SMALL_P = 0x0002 + 0x0010 + 0x0020 + 0x0080 + 0x0100, // p
    ASCII_SMALL_Q = 0x0010 + 0x0020 + 0x0100 + 0x0200 + 0x0800 + 0x1000 + 0x2000, // q
    ASCII_SMALL_R = 0x0008 + 0x1000, // r
    ASCII_SMALL_S = 0x1000 + 0x2000 + 0x8000, // s
    ASCII_SMALL_T = 0x0008 + 0x0080 + 0x1000 + 0x8000, // t
    ASCII_SMALL_U = 0x0008 + 0x4000 + 0x8000, // u
    ASCII_SMALL_V = 0x2000 + 0x4000, // v
    ASCII_SMALL_W = 0x0002 + 0x0004 + 0x2000 + 0x4000, // w
    ASCII_SMALL_X = 0x0004 + 0x0010 + 0x1000 + 0x2000, // x ??
    ASCII_SMALL_Y = 0x2000 + 0x4000 + 0x8000, // y
    ASCII_SMALL_Z = 0x0001 + 0x0004 + 0x0010, // z
    ASCII_CURVED_OPEN_BRACKET = 0x0001 + 0x0004 + 0x0010 + 0x0040 + 0x0100 + 0x0200 + 0x8000, // {
    ASCII_LINE = 0x0008 + 0x0080, // |
    ASCII_CURVED_CLOSE_BRACKET = 0x0001 + 0x0100 + 0x200 + 0x400 + 0x1000 + 0x2000 + 0x8000, // }
    ASCII_TILDE = 0x0020 + 0x0040 + 0x0400, // ~
    ASCII_DEL = 0x20000, // DEL
    NON_ASCII_GRAD = 0x0080 + 0x0200 + 0x0800 + 0x1000, // °
} Characters;

#endif /* _CHARACTERS_H */
